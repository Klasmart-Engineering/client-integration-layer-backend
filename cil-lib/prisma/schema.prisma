generator external {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  QUEUED
  PROCESSED
}

model Organization {
  externalUuid String @id @map("external_uuid") @db.Uuid
  klUuid       String @unique @map("kl_uuid") @db.Uuid
  name         String @db.VarChar(30)

  schools  School[]
  classes  Class[]
  users    User[]
  roles    Role[]
  programs Program[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index(klUuid)
  @@map("validation_organizations")
}

model School {
  externalUuid    String       @id @map("external_uuid") @db.Uuid
  externalOrgUuid String       @map("external_org_uuid") @db.Uuid
  organization    Organization @relation(fields: [externalOrgUuid], references: [externalUuid])

  classes Class[]
  users   User[]

  programUuids String[] @map("program_uuids") @db.Uuid

  klUuid String? @unique @map("kl_uuid") @db.Uuid

  status    Status    @default(QUEUED) @map("status")
  attempts  Int       @default(0)
  requestId String    @map("request_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")


  @@index(klUuid)
  @@map("validation_schools")
}

model Class {
  externalUuid String @id @map("external_uuid") @db.Uuid

  externalOrgUuid String       @map("external_org_uuid") @db.Uuid
  organization    Organization @relation(fields: [externalOrgUuid], references: [externalUuid])

  externalSchoolUuid String @map("external_school_uuid") @db.Uuid
  school             School @relation(fields: [externalSchoolUuid], references: [externalUuid])

  klUuid String? @unique @map("kl_uuid") @db.Uuid

  // Metadata
  status    Status    @default(QUEUED) @map("status")
  attempts  Int       @default(0)
  requestId String    @map("request_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")


  @@index(klUuid)
  @@map("validation_classes")
}

model User {
  externalUuid String @id @map("external_uuid") @db.Uuid

  externalOrgUuid String       @map("external_org_uuid") @db.Uuid
  organization    Organization @relation(fields: [externalOrgUuid], references: [externalUuid])

  externalSchoolUuid String @map("external_school_uuid") @db.Uuid
  school             School @relation(fields: [externalSchoolUuid], references: [externalUuid])

  klUuid String? @unique @map("kl_uuid") @db.Uuid

  status    Status    @default(QUEUED) @map("status")
  attempts  Int       @default(0)
  requestId String    @map("request_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")


  @@index(klUuid)
  @@map("validation_users")
}

model Role {
  klUuid String @id @map("external_uuid") @db.Uuid
  name   String @db.VarChar(20)

  externalOrgUuid String       @map("external_org_uuid") @db.Uuid
  organization    Organization @relation(fields: [externalOrgUuid], references: [externalUuid])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")


  @@index([name, externalOrgUuid])
  @@map("validation_roles")
}

model Program {
  klUuid String @id @map("external_uuid") @db.Uuid
  name   String @db.VarChar(100)

  externalOrgUuid String       @map("external_org_uuid") @db.Uuid
  organization    Organization @relation(fields: [externalOrgUuid], references: [externalUuid])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")


  @@index([name, externalOrgUuid])
  @@map("validation_programs")
}
